/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.22).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Body2;
import io.swagger.model.Body3;
import io.swagger.model.InlineResponse2001;
import io.swagger.model.Location;
import java.util.Objects;
import io.swagger.model.SOS;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-11-01T02:17:21.680Z[GMT]")
@Api(value = "worker", description = "the worker API")
public interface WorkerApi {

    @ApiOperation(value = "Ending a shift by worker", nickname = "endShift", notes = "", authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "worker", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Invalid token") })
    @RequestMapping(value = "/worker/end_shift",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> endShift(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Body3 body
);


    @ApiOperation(value = "Find the nearest objects to worker", nickname = "findObjects", notes = "", response = Objects.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "worker","object", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = Objects.class, responseContainer = "List"),
        @ApiResponse(code = 500, message = "Error in calculations") })
    @RequestMapping(value = "/worker/find_objects",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<List<Objects>> findObjects(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Location body
);


    @ApiOperation(value = "Get information about worker", nickname = "getWorkerInfo", notes = "", response = InlineResponse2001.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "worker", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok", response = InlineResponse2001.class),
        @ApiResponse(code = 500, message = "Error on load from DB") })
    @RequestMapping(value = "/worker",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse2001> getWorkerInfo();


    @ApiOperation(value = "Send sos notification", nickname = "sendSOS", notes = "", authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "worker", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Ok"),
        @ApiResponse(code = 500, message = "Wrong Info") })
    @RequestMapping(value = "/worker/send_sos",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> sendSOS(@ApiParam(value = "" ,required=true )  @Valid @RequestBody SOS body
);


    @ApiOperation(value = "Starting a shift by worker", nickname = "startShift", notes = "", authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "worker", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Invalid token") })
    @RequestMapping(value = "/worker/start_shift",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> startShift(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Body2 body
);


    @ApiOperation(value = "Sending worker location", nickname = "workerLocation", notes = "", authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "worker", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Invalid token") })
    @RequestMapping(value = "/worker/location",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> workerLocation(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Location body
);

}

